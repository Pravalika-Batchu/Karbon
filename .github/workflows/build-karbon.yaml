name: Build Karbon and Release

on:
  push:
    branches:
      - main
      - fix/cross-platform-upload
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            extension: .exe
            pyinstaller-args: --onefile --noconsole --name Karbon --icon=icon.ico
          - os: ubuntu-latest
            extension: ""
            pyinstaller-args: --onefile --noconsole --name Karbon
          - os: macos-latest
            extension: .app
            pyinstaller-args: --onedir --noconsole --name Karbon
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        shell: bash
        run: |
          unset PYTHONPATH PYTHONHOME
          export PATH="/Users/runner/hostedtoolcache/Python/3.11.9/arm64/bin:$PATH"  # Ensure correct Python on macOS
          python3 -m pip install --upgrade pip setuptools wheel
          python3 -m pip install --no-cache-dir --force-reinstall pyinstaller==5.7.0 pyinstaller-hooks-contrib==2023.10
          if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
            python3 -m pip install --no-cache-dir --no-deps pywebview Pillow || true
          else
            python3 -m pip install -r requirements.txt || true
          fi

      - name: Fix PyInstaller case-sensitivity
        shell: bash
        run: |
          SITE_PACKAGES=$(python3 -c 'import site; print(site.getsitepackages()[0])')
          if [ -d "$SITE_PACKAGES/PyInstaller" ] && [ ! -d "$SITE_PACKAGES/pyinstaller" ]; then
            mv "$SITE_PACKAGES/PyInstaller" "$SITE_PACKAGES/pyinstaller" || true
          fi

      - name: Debug PyInstaller installation
        shell: bash
        run: |
          echo "Python path: $(which python3)"
          python3 --version
          echo "Pip path: $(which pip)"
          python3 -m pip --version
          echo "Python executable used by pip:"
          python3 -m pip debug --verbose | grep "sys.executable" || true
          python3 -m pip list | grep pyinstaller || echo "PyInstaller not listed in pip"
          echo "Python sys.path:"
          python3 -c "import sys; print('\n'.join(sys.path))"
          echo "Site-packages contents:"
          ls -l $(python3 -c 'import site; print(site.getsitepackages()[0])')
          echo "Checking PyInstaller module files:"
          ls -l $(python3 -c 'import site; print(site.getsitepackages()[0])')/{PyInstaller,pyinstaller} || true
          echo "Checking PyInstaller import (PyInstaller):"
          python3 -c "import PyInstaller; print(PyInstaller.__version__)" || { echo "Failed to import PyInstaller"; exit 1; }
          echo "Checking PyInstaller import (pyinstaller):"
          python3 -c "import pyinstaller; print(pyinstaller.__version__)" || { echo "Failed to import pyinstaller"; exit 1; }
          echo "Checking PyInstaller module:"
          python3 -m pyinstaller --version || { echo "PyInstaller module not found"; exit 1; }

      - name: Build executable with PyInstaller
        shell: bash
        run: |
          python3 -m pyinstaller ui.py ${{ matrix.pyinstaller-args }}

      - name: Rename binary for upload
        shell: bash
        run: |
          mkdir -p upload
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            cp -r "dist/Karbon.app" "upload/Karbon-${{ runner.os }}.app"
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp "dist/Karbon.exe" "upload/Karbon-${{ runner.os }}.exe"
          else
            cp "dist/Karbon" "upload/Karbon-${{ runner.os }}"
          fi

      - name: Get short commit hash
        id: vars
        shell: bash
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "build-${{ env.SHORT_SHA }}"
          name: "Karbon Build ${{ env.SHORT_SHA }}"
          draft: false
          prerelease: false
          files: upload/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
