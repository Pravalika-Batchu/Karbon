name: Build Karbon and Release

on:
  push:
    branches:
      - main
      - fix/cross-platform-upload

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            extension: .exe
            pyinstaller-args: --onefile --noconsole --name Karbon --icon=icon.ico
          - os: ubuntu-latest
            extension: ""
            pyinstaller-args: --onefile --noconsole --name Karbon
          - os: macos-latest
            extension: .app
            pyinstaller-args: --onedir --noconsole --name Karbon
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install virtualenv
        shell: bash
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install virtualenv

      - name: Create and activate virtual environment
        shell: bash
        run: |
          unset PYTHONPATH PYTHONHOME
          python3 -m virtualenv --clear venv
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            source venv/Scripts/activate
            VENV_PYTHON="venv/Scripts/python"
          else
            source venv/bin/activate
            VENV_PYTHON="venv/bin/python"
          fi
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "PYTHONPATH=$($VENV_PYTHON -c 'import site; print(site.getsitepackages()[0])')" >> $GITHUB_ENV

      - name: Install dependencies
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            source venv/Scripts/activate
            VENV_PYTHON="venv/Scripts/python"
          else
            source venv/bin/activate
            VENV_PYTHON="venv/bin/python"
          fi
          "$VENV_PYTHON" -m pip install --upgrade pip setuptools wheel
          "$VENV_PYTHON" -m pip install --no-cache-dir --force-reinstall pyinstaller==5.13.2 pyinstaller-hooks-contrib==2024.8 || { echo "Failed to install PyInstaller"; exit 1; }
          "$VENV_PYTHON" -m pip install -r requirements.txt || true

      - name: Debug PyInstaller installation
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            source venv/Scripts/activate
            VENV_PYTHON="venv/Scripts/python"
          else
            source venv/bin/activate
            VENV_PYTHON="venv/bin/python"
          fi
          echo "Python path: $(which python)"
          "$VENV_PYTHON" --version
          echo "Pip path: $(which pip)"
          "$VENV_PYTHON" -m pip --version
          "$VENV_PYTHON" -m pip list | grep pyinstaller || echo "PyInstaller not listed in pip"
          echo "Python sys.path:"
          "$VENV_PYTHON" -c "import sys; print('\n'.join(sys.path))"
          echo "Checking PyInstaller module:"
          "$VENV_PYTHON" -m pyinstaller --version || { echo "PyInstaller module not found"; exit 1; }
          echo "Virtual environment site-packages contents:"
          ls -l $($VENV_PYTHON -c 'import site; print(site.getsitepackages()[0])')
          echo "Checking PyInstaller module files:"
          ls -l $($VENV_PYTHON -c 'import site; print(site.getsitepackages()[0])')/PyInstaller || true

      - name: Build executable with PyInstaller
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            source venv/Scripts/activate
            VENV_PYTHON="venv/Scripts/python"
          else
            source venv/bin/activate
            VENV_PYTHON="venv/bin/python"
          fi
          "$VENV_PYTHON" -m pyinstaller ui.py ${{ matrix.pyinstaller-args }}

      - name: Rename binary for upload
        shell: bash
        run: |
          mkdir -p upload
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            cp -r "dist/Karbon.app" "upload/Karbon-${{ runner.os }}.app"
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp "dist/Karbon.exe" "upload/Karbon-${{ runner.os }}.exe"
          else
            cp "dist/Karbon" "upload/Karbon-${{ runner.os }}"
          fi

      - name: Get short commit hash
        id: vars
        shell: bash
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "build-${{ env.SHORT_SHA }}"
          name: "Karbon Build ${{ env.SHORT_SHA }}"
          draft: false
          prerelease: false
          files: upload/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
